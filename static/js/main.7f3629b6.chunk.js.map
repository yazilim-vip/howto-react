{"version":3,"sources":["lib/index.tsx","showcase/redux/actions.tsx","showcase/redux/reducers.tsx","showcase/redux/types.tsx","showcase/redux/configureStore.tsx","showcase/HowTo.tsx","showcase/App.tsx","index.tsx","lib/utils/createSearchIndex.tsx","lib/utils/getSearchResultItemList.tsx","lib/utils/parsePathAndSetContent.tsx","lib/utils/searchArchive.tsx","lib/constants.tsx","lib/utils/json2CategoryMapper.ts","lib/utils/getFileManagerItemList.tsx","lib/components/TooltipElement.tsx","lib/components/FileManager.tsx","lib/components/PathBreadcrumb.tsx","lib/components/ViewModeChanger.tsx","lib/components/HowToContainer.tsx","lib/utils/toggleFmViewMode.tsx"],"names":["howToReducer","state","action","type","newViewMode","prevViewMode","fileManagerViewMode","HOWTO_DEFAULT_VIEW_MODE","HOWTO_VIEW_MODE_GRID_VIEW","HOWTO_VIEW_MODE_LIST_VIEW","locationReducer","LOCATION_CHANGE","requestedPath","payload","location","pathname","persistConfig","key","storage","whitelist","history","createBrowserHistory","createRootReducer","combineReducers","router","connectRouter","howtoReducer","persistReducer","firebaseApp","firebase","initializeApp","apiKey","databaseURL","projectId","mapDispatchToProps","createToggleAction","undefined","HowTo","connect","useState","howToData","setHowToData","errorFlag","setErrorFlag","errorMessage","setErrorMessage","loadedFlag","setLoadedFlag","useEffect","fetchHowtoData","auth","signInAnonymously","then","database","ref","on","snapshot","exists","val","data","JSON","parse","json2CategoryMapper","error","catch","console","log","className","Spinner","animation","Alert","variant","path","Date","rootCategory","viewMode","events","viewModeToggleEventHandler","itemSelectEventHandler","link","push","replace","library","add","fab","fas","far","App","Container","fluid","from","to","slice","exact","component","preloadedState","middlewares","routerMiddleware","middlewareEnhancer","applyMiddleware","enhancers","composedEnhancers","composeWithDevTools","persistedRootReducer","store","createStore","persistor","persistStore","configureStore","ReactDOM","render","loading","document","getElementById","WebFont","load","google","families","createSearchIndex","indexContent","arr","howtoList","subCategoryList","Object","keys","forEach","name","label","howToItem","HOWTO_ITEM_TYPE_HOWTO","toLowerCase","subCategory","newPath","HOWTO_ITEM_TYPE_CATEGORY","getSearchResultItemList","searchResult","result","categoryHits","hit","howtoHits","parsePathAndSetContent","categoryNames","split","folderPath","join","selectedCategoryName","length","rootCategorySelectedFlag","howtoSelectedFlag","endsWith","selectedHowtoName","pop","parsedContent","setContent","categoryFoundFlag","_","isUndefined","selectedCategory","howToFoundFlag","selectedHowto","shift","cat","hasOwnProperty","searchArchive","searchIndex","query","hits","filter","o","includes","mockData","categoryObj","stringify","objSubCategoryList","sc","objHowToList","ht","howTo","categoryList","filePath","markdownContent","getFileManagerItemList","catName","howToList","howToName","TooltipElement","placement","tooltipElement","children","OverlayTrigger","overlay","Tooltip","id","FileManager","itemList","itemSelectedEventHandler","getProps","icon","faFolder","color","faFileAlt","ListGroup","map","item","props","onClick","Item","Row","Col","xs","sm","md","lg","size","PathBreadcrumb","items","Breadcrumb","linkProps","faHome","index","active","getLink","ViewModeChanger","ButtonGroup","toggle","ToggleButton","value","checked","onChange","faTh","faThList","HowToContainer","setSearchResult","fmViewMode","setFmViewMode","parsedUrl","pathBreadcrumbElements","Badge","pill","FormControl","placeholder","aria-label","event","searchEventHandler","handlerSearchEvent","target","source","defaultProps"],"mappings":"2IAAA,q9C,yQCaO,I,wECNMA,EAAe,WAAqD,IAApDC,EAAmD,uDAAtC,GAAIC,EAAkC,uCAC5E,OAAQA,EAAOC,MACX,ICP2B,sBDQvB,IACIC,EADEC,EAAeJ,EAAMK,qBAAuBC,0BASlD,OANIH,EADAC,IAAiBG,4BACHC,4BACPJ,IAAiBI,4BACVD,4BAEAD,0BAEX,2BACAN,GADP,IAEIK,oBAAqBF,IAE7B,QACI,OAAOH,IAINS,EAAkB,WAA6D,IAA5DT,EAA2D,uDAA9C,GAAIC,EAA0C,uCACvF,OAAQA,EAAOC,MACX,KAAKQ,IACD,OAAO,2BACAV,GADP,IAEIW,cAAeV,EAAOW,QAAQC,SAASC,WAE/C,QACI,OAAOd,IE3Bbe,EAAgB,CAClBC,IAAK,OACLC,YACAC,UAAW,CAAC,wBAGHC,EAAUC,cAEjBC,EAAoB,SAACF,GAAD,OACtBG,0BAAgB,CACZC,OAAQC,YAAcL,GACtBM,aAAcC,YAAeX,EAAehB,GAC5CU,qBCRR,IAKakB,EAAcC,IAASC,cALrB,CACXC,OAAQ,0CACRC,YAAa,oCACbC,UAAW,eA2GTC,EAAqB,CAAEC,mBJ9GK,WAC9B,MALO,CAAEhC,KEPsB,sBFOhBU,aAK0BuB,KI8GhCC,EAAQC,aARG,SAACrC,GACrB,MAAO,CACHK,oBAAqBL,EAAMyB,aAAapB,oBACxCM,cAAeX,EAAMS,gBAAgBE,iBAKCsB,EAAzBI,EAlGN,SAAC,GAA4E,IAA1E1B,EAAyE,EAAzEA,cAAeN,EAA0D,EAA1DA,oBAAqB6B,EAAqC,EAArCA,mBAAqC,EAErDI,mBAA0B,MAF2B,mBAEhFC,EAFgF,KAErEC,EAFqE,OAGrDF,oBAAkB,GAHmC,mBAGhFG,EAHgF,KAGrEC,EAHqE,OAI/CJ,mBAAwB,MAJuB,mBAIhFK,EAJgF,KAIlEC,EAJkE,OAKnDN,oBAAkB,GALiC,mBAKhFO,EALgF,KAKpEC,EALoE,KAQvFC,qBAAU,WACDF,GACDG,OAKR,IAAMA,EAAiB,WACnBrB,EACKsB,OACAC,oBACAC,MAAK,WACFxB,EACKyB,WACAC,IAAI,SACJC,GACG,SACA,SAACC,GACG,GAAIA,EAASC,SAAU,CACnB,IAAMC,EAAMF,EAASE,MACfC,EAAOC,KAAKC,MAAMH,GACxBjB,EAAaqB,8BAAoBH,IACjCZ,GAAc,GACdJ,GAAa,QAEbI,GAAc,GACdJ,GAAa,GACbE,EAAgB,0CAIxB,SAACkB,GACGhB,GAAc,GACdJ,GAAa,GACbE,EAAgB,GAAD,OAAIkB,UAIlCC,OAAM,SAACD,GACJE,QAAQC,IAAI,eAAgBH,OAKxC,IAAKjB,EACD,OACI,yBAAKqB,UAAU,gBACX,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASF,UAAU,+BAKlD,IAAK3B,GAAaE,EACd,OACI,kBAAC4B,EAAA,EAAD,CAAOrD,IAAK,EAAGsD,QAAQ,UAClB3B,GAMb,IAAM4B,EAAyB,MAAlB5D,EAAwB,SAAW,SAAWA,EAC3D,OACI,kBAAC,iBAAD,CACIK,IAAG,UAAKL,EAAL,YAAsB,IAAI6D,MAC7BC,aAAclC,EACd5B,cAAe4D,EACfG,SAAUrE,EACVsE,OAAQ,CACJC,2BAA4B,WACxB1C,KAEJ2C,uBAAwB,SAAC3E,EAAM4E,GAC3B3D,EAAQ4D,KAAKD,EAAKE,QAAQ,SAAU,YC7FxDC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KACZH,IAAQC,IAAIG,KAEZ,IAWeC,EAXC,kBACZ,kBAAC,IAAD,CAAiBnE,QAASA,GACtB,kBAACoE,EAAA,EAAD,CAAWC,OAAK,EAACtB,UAAU,cACvB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUuB,KAAK,aAAaC,GAAIvE,EAAQN,SAASC,SAAS6E,MAAM,GAAI,KACpE,kBAAC,IAAD,CAAOC,OAAK,EAACrB,KAAK,KAAKsB,UAAWzD,Q,EFC3C,WAAqD,IAA7B0D,EAA4B,4DAAX3D,EAEtC4D,EAAc,CAACC,YAAiB7E,IAChC8E,EAAqBC,kBAAe,WAAf,EAAmBH,GAGxCI,EAAY,CAACF,GACbG,EAAoBC,sBAAmB,WAAnB,EAAuBF,GAG3CG,EAAuBjF,EAAkBF,GAGzCoF,EAAQC,sBAAYF,EAAsBR,EAAgBM,GAE1DK,EAAYC,YAAaH,GAE/B,MAAO,CAAEA,QAAOE,aG9BSE,GAArBJ,E,EAAAA,MAAOE,E,EAAAA,UAEfG,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,IAAD,CAAaO,QAAS,KAAML,UAAWA,GACnC,kBAAC,EAAD,QAGRM,SAASC,eAAe,SAG5BC,IAAQC,KAAK,CACTC,OAAQ,CACJC,SAAU,CAAC,OAAQ,c,gCCxB3B,6CAIaC,EAAoB,SAAC5C,GAC9B,OAAO6C,EAAa7C,EAAc,GAAI,WAGpC6C,EAAe,SAAfA,EAAgB5D,EAAgB6D,EAAkBhD,GACpD,IAAMiD,EAAY9D,EAAK8D,UACjBC,EAAkB/D,EAAK+D,gBA8B7B,OA5BAC,OAAOC,KAAKH,GAAWI,SAAQ,SAAC5G,GAC5B,IACM6G,EADQL,EAAUxG,GACL8G,MAGbC,EAAuB,CACzBxD,KAHYA,EAAO,IAAMsD,EAIzB3H,KAAM8H,IACNH,KAAMA,EAAKI,eAEfV,EAAIxC,KAAKgD,MAGbL,OAAOC,KAAKF,GAAiBG,SAAQ,SAAC5G,GAClC,IAAMkH,EAAcT,EAAgBzG,GAC9B6G,EAAOK,EAAYL,KACnBM,EAAU5D,EAAO,IAAMsD,EAEvBE,EAAuB,CACzBxD,KAAM4D,EACNjI,KAAMkI,IACNP,KAAMA,EAAKI,eAGfV,EAAIxC,KAAKgD,GACTT,EAAaY,EAAaX,EAAKY,MAG5BZ,I,gCCrCX,kCAAO,IAAMc,EAA0B,SAACC,GAAyD,IAAD,IAC5F,IAAKA,EACD,MAAO,GAGX,IAAMC,EAAsB,GAQ5B,OAPA,UAAAD,EAAaE,oBAAb,SAA2BZ,SAAQ,SAACa,GAChCF,EAAOxD,KAAK0D,MAGhB,UAAAH,EAAaI,iBAAb,SAAwBd,SAAQ,SAACa,GAC7BF,EAAOxD,KAAK0D,MAETF,I,sFCqBEI,EAAyB,SAAClE,EAAoCF,GACvE,IAAMqE,EAAgBrE,EAAKoB,MAAM,GAAGkD,MAAM,KACpCC,EAAa,IAAMF,EAAcG,KAAK,KACtCC,EAAuBJ,EAAcA,EAAcK,OAAS,GAC5DC,EAA6C,WAAT3E,EACpC4E,EAAoB5E,EAAK6E,SAAS,WAAa7E,EAAK6E,SAAS,OAC7DC,EAAoBF,EAAoBP,EAAcU,WAAQnH,EAE9DoH,EAAgBC,EAAW/E,EAAcmE,EAAeS,GAI9D,MAAO,CACHT,gBACAE,aACAE,uBACAE,2BACAC,oBACAE,oBACAE,gBACAE,mBAVuBC,IAAEC,YAAF,OAAcJ,QAAd,IAAcA,OAAd,EAAcA,EAAeK,kBAWpDC,gBAVoBH,IAAEC,YAAF,OAAcJ,QAAd,IAAcA,OAAd,EAAcA,EAAeO,iBAcnDN,EAAa,SACf/E,EACAmE,EACAS,GAC6B,IAAD,EACxBO,EAAmBnF,EACvBmE,EAAcmB,QAFc,oBAGVnB,GAHU,IAG5B,2BAAiC,CAAC,IAAD,EAAtBoB,EAAsB,QAC7BJ,EAAgB,UAAGA,SAAH,aAAG,EAAkBnC,gBAAgBuC,IAJ7B,8BAO5B,IAAMzB,EAAwB,CAC1BqB,mBACAE,mBAAe3H,EACfqG,kBAAcrG,EACduG,eAAWvG,GAMf,OAHIkH,IAAiB,UAAIO,SAAJ,aAAI,EAAkBpC,UAAUyC,eAAeZ,MAChEd,EAAOuB,cAAgBF,EAAiBpC,UAAU6B,IAE/Cd,I,gCCnFX,6CAIa2B,EAAgB,SAACC,EAA0BC,GACpD,IAAKA,EACD,MAAO,CACHA,MAAO,IAIf,IAAMC,EAAOF,EAAYG,QAAO,SAACC,GAAD,OAAOA,EAAE1C,KAAK2C,SAASJ,EAAMnC,kBAC7D,IAAKoC,EACD,MAAO,CACHD,MAAOA,GAIf,IAAM5B,EAA4B,GAC5BE,EAAyB,GAS/B,OARA2B,EAAKzC,SAAQ,SAACa,GACNA,EAAIvI,OAASkI,IACbI,EAAazD,KAAK0D,GACXA,EAAIvI,OAAS8H,KACpBU,EAAU3D,KAAK0D,MAIhB,CACH2B,MAAOA,EACP5B,aAAcA,EACdE,UAAWA,K,+BC7BnB,0KACO,IAAMlI,EAA4B,YAC5BD,EAA4B,YAC5BD,EAA+CC,EAG/CyH,EAAwB,YACxBI,EAA2B,gB,qKCTxC,kCAKO,IAAMvE,EAAsB,SAAtBA,EAAuB4G,GAChC,IAAMC,EAAc/G,KAAKC,MAAMD,KAAKgH,UAAUF,IAExCG,EAAqBF,EAAYjD,gBACjCA,EAA6C,GACnDC,OAAOC,KAAKiD,GAAoBhD,SAAQ,SAACiD,GACrC,IAAM3C,EAAcrE,EAAoB+G,EAAmBC,IAC3DpD,EAAgBS,EAAYL,MAAQK,KAGxC,IAAM4C,EAAeJ,EAAYlD,UAC3BA,EAAoC,GAU1C,OATAE,OAAOC,KAAKmD,GAAclD,SAAQ,SAACmD,GAC/B,IAAMC,EAAe,CACjBC,aAAcH,EAAaC,GAAIE,aAC/BnD,MAAOgD,EAAaC,GAAIjD,MACxBoD,SAAUJ,EAAaC,GAAIG,SAC3BC,gBAAiBL,EAAaC,GAAII,iBAEtC3D,EAAUwD,EAAMlD,OAASkD,KAEtB,CACHnD,KAAM6C,EAAY7C,KAClBJ,kBACAD,e,2KCzBK4D,EAAyB,SAACxB,EAAwCd,GAC3E,IAAKc,EACD,MAAO,GAGX,IAAMrB,EAAsB,GAEtB0C,EAAerB,EAAiBnC,gBACtCC,OAAOC,KAAKsD,GAAcrD,SAAQ,SAACyD,GAC/B9C,EAAOxD,KAAK,CACR8C,KAAMoD,EAAaI,GAASxD,KAC5BtD,KAAK,GAAD,OAAKuE,EAAL,YAAmBmC,EAAaI,GAASxD,MAC7C3H,KAAMkI,SAId,IAAMkD,EAAY1B,EAAiBpC,UASnC,OARAE,OAAOC,KAAK2D,GAAW1D,SAAQ,SAAC2D,GAC5BhD,EAAOxD,KAAK,CACR8C,KAAMyD,EAAUC,GAAWzD,MAC3BvD,KAAK,GAAD,OAAKuE,EAAL,YAAmBwC,EAAUC,GAAWzD,OAC5C5H,KAAM8H,SAIPO,G,4ECvBEiD,EAA0C,SAAC,GAI5B,IAHxBC,EAGuB,EAHvBA,UACAC,EAEuB,EAFvBA,eACAC,EACuB,EADvBA,SAEA,OACI,kBAACC,EAAA,EAAD,CAAgBH,UAAWA,EAAWI,QAAS,kBAACC,EAAA,EAAD,CAASC,GAAG,oBAAoBL,IAC1EC,ICFAK,EAAoC,SAAC,GAIzB,IAHrBtH,EAGoB,EAHpBA,SACAuH,EAEoB,EAFpBA,SACAC,EACoB,EADpBA,yBAEMC,EAAW,SAACjM,GACd,OAAIA,IAASkI,IACF,CACHgE,KAAMC,IACNC,MAAO,WAGJ,CACHF,KAAMG,IACND,MAAO,YAKnB,OACI,kBAAC/G,EAAA,EAAD,CAAWC,OAAK,GACXd,IAAalE,KACV,kBAACgM,EAAA,EAAD,YACKP,QADL,IACKA,OADL,EACKA,EAAUQ,KAAI,SAACC,GACZ,IAAMC,EAAQR,EAASO,EAAKxM,MAC5B,OACI,yBACIgE,UAAU,oBACVlD,IAAK0L,EAAKnI,KACVqI,QAAS,WACLV,EAAyBQ,EAAKxM,KAAMwM,EAAKnI,QAG7C,kBAACiI,EAAA,EAAUK,KAAX,KACI,kBAAC,IAAD,CAAiBT,KAAMO,EAAMP,KAAMlI,UAAU,OAAOoI,MAAOK,EAAML,QAChEI,EAAK7E,WAO7BnD,IAAanE,KACV,kBAACuM,EAAA,EAAD,YACKb,QADL,IACKA,OADL,EACKA,EAAUQ,KAAI,SAACC,GACZ,IAAMC,EAAQR,EAASO,EAAKxM,MAC5B,OACI,kBAAC6M,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGjJ,UAAU,mBAAmBlD,IAAK0L,EAAKnI,MACpE,kBAAC,EAAD,CACIkH,UAAU,SACVC,eAAgBgB,EAAKnI,KAAKS,QAAQ,UAAW,IAAIA,QAAQ,MAAO,QAEhE,yBACId,UAAU,oBACV0I,QAAS,WACLV,EAAyBQ,EAAKxM,KAAMwM,EAAKnI,QAG7C,kBAAC,IAAD,CACI6H,KAAMO,EAAMP,KACZlI,UAAU,OACVkJ,KAAK,KACLd,MAAOK,EAAML,QAEjB,6BACCI,EAAK7E,c,SCnEjCwF,EAA0C,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,MAAOzI,EAAkD,EAAlDA,uBAI7D,OACI,kBAAC0I,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWV,KAAZ,CACI7L,IAAI,OACJwM,UAAW,CACPtJ,UAAW,QAEf0I,QAAS,kBAAM/H,EAAuBuD,IAA0B,YAEhE,8BACI,kBAAC,IAAD,CAAiBgE,KAAMqB,QAG9BH,EAAMb,KAAI,SAACC,EAAMgB,GACd,OACI,kBAACH,EAAA,EAAWV,KAAZ,CACI7L,IAAK0L,EACLc,UAAW,CACPtJ,UAAW,QAEfyJ,OAAQD,EAAQ,IAAMJ,EAAMrE,OAC5B2D,QAAS,kBAAM/H,EAAuBuD,IAxB1C,SAACsF,GACb,MAAO,UAAYJ,EAAM3H,MAAM,EAAG+H,GAAO3E,KAAK,KAuBkC6E,CAAQF,EAAQ,MAE/EhB,Q,kBC1BZmB,EAA4C,SAAC,GAG7B,IAFzBnJ,EAEwB,EAFxBA,SACAE,EACwB,EADxBA,2BAEA,OACI,kBAACkJ,EAAA,EAAD,CAAaC,QAAM,EAAC7J,UAAU,eAC1B,kBAAC,EAAD,CAAgBuH,UAAU,SAASC,eAAe,kBAC9C,kBAACsC,EAAA,EAAD,CACI9N,KAAK,QACLoE,QAAQ,YACRuD,KAAK,QACLoG,MAAOvJ,IAAanE,IAA4B,OAAS,QACzD2N,QAASxJ,IAAanE,IACtB4N,SAAU,kBAAMvJ,MAEhB,kBAAC,IAAD,CAAiBwH,KAAMgC,QAG/B,kBAAC,EAAD,CAAgB3C,UAAU,SAASC,eAAe,kBAC9C,kBAACsC,EAAA,EAAD,CACI9N,KAAK,QACLoE,QAAQ,YACRuD,KAAK,QACLoG,MAAOvJ,IAAalE,IAA4B,OAAS,QACzD0N,QAASxJ,IAAalE,IACtB2N,SAAU,kBAAMvJ,MAEhB,kBAAC,IAAD,CAAiBwH,KAAMiC,UClB9BC,G,OAA0C,SAAC,GAK5B,IAAD,MAJvB7J,EAIuB,EAJvBA,aACA9D,EAGuB,EAHvBA,cACA+D,EAEuB,EAFvBA,SACAC,EACuB,EADvBA,OACuB,EAEiBrC,wBAAmCH,GAFpD,mBAEhBmG,EAFgB,KAEFiG,EAFE,OAGajM,mBAA8BoC,GAH3C,mBAGhB8J,EAHgB,KAGJC,EAHI,KAMjBtE,EAAc9C,YAAkB5C,GAChCiK,EAAY/F,YAAuBlE,EAAc9D,GACjDiJ,EAAgB,OAAG8E,QAAH,IAAGA,GAAH,UAAGA,EAAWnF,qBAAd,aAAG,EAA0BK,iBAC7C+E,EAAsB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAW9F,eAC1C,OAAI8F,QAAJ,IAAIA,OAAJ,EAAIA,EAAWrF,oBACXsF,EAAuB5J,KAAK2J,EAAUrF,mBA2B1C,OAAKqF,EAAUjF,kBAcX,6BACI,kBAACqD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKG,GAAG,KACJ,kBAAC,EAAD,CACII,MAAOqB,EACP9J,uBAAwBF,EAAOE,yBAElCyD,GACG,yBAAKpE,UAAU,qBACX,0BAAMA,UAAU,QAAhB,uBACA,kBAAC0K,EAAA,EAAD,CAAOC,MAAI,EAACvK,QAAQ,QACfgE,EAAa8B,SAK9B,kBAAC2C,EAAA,EAAD,CAAKG,GAAG,IAAID,GAAG,IAAI/I,UAAU,gBACzB,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,kBAEbwK,EAAUvF,mBACR,kBAAC,EAAD,CACIzE,SAAU8J,EACV5J,2BA5DO,WAC/B,GAAID,EAAOC,2BACPD,EAAOC,iCACJ,CACH,IAAMzE,GCxCeC,EDwCgBoO,KCvCxBjO,IACVC,IACAJ,IAAiBI,IACjBD,IAEAD,IDmCHmO,EAActO,GCzCM,IAACC,ODqGjB,kBAAC2M,EAAA,EAAD,CAAKG,GAAG,IAAID,GAAG,KACX,kBAAC6B,EAAA,EAAD,CACI5O,KAAK,SACL6O,YAAY,YACZC,aAAW,SACXf,MAAO3F,EAAeA,EAAa8B,MAAQ,GAC3C+D,SAAU,SAACc,IA9DJ,SAAC7E,GACxB,GAAIzF,EAAOuK,mBACPvK,EAAOuK,mBAAmB9E,QAE1B,GAAIA,EAAO,CACP,IAAM9B,EAAe4B,YAAcC,EAAaC,GAChDmE,EAAgBjG,QAEhBiG,OAAgBpM,GAwDJgN,CADoBF,EAAMG,OAAOnB,YAMjD,8BACE3F,GAAgBoG,EAAUvF,oBAAsBuF,EAAU7E,gBACxD,kBAACxF,EAAA,EAAD,CAAOrD,IAAK,EAAGsD,QAAQ,UACnB,qCAAWoK,EAAUrF,mBADzB,iBAC6D,kCAAIO,QAAJ,IAAIA,OAAJ,EAAIA,EAAkB/B,MADnF,WAEI,+BAINS,GAAgBoG,EAAU7E,eACxB,kBAAC,IAAD,CAAewF,OAAM,OAAEX,QAAF,IAAEA,GAAF,UAAEA,EAAWnF,qBAAb,iBAAE,EAA0BO,qBAA5B,aAAE,EAAyCqB,kBAEhE,kBAAC,EAAD,CACIe,yBAA0BvH,EAAOE,uBACjCH,SAAU8J,EACVvC,SACI3D,EACMD,YAAwBC,GACxB8C,EAAuBxB,EAAkB8E,EAAU5F,eAtErE,yCACa,2BAAI4F,EAAU5F,WAAW9D,QAAQ,UAAW,IAAM,KAD/D,qBAGI,6BACA,yBAAK4H,QAAS,kBAAMjI,EAAOE,uBAAuBuD,IAA0B,YAA5E,2BA0EhBkG,EAAegB,aAAe,CAC1B5K,SAAUpE,M","file":"static/js/main.7f3629b6.chunk.js","sourcesContent":["export * from './components/HowToContainer'\n\nexport * from './types'\nexport * from './constants'\n\nexport * from './models/Category'\nexport * from './models/HowTo'\nexport * from './models/HowToItem'\nexport * from './models/ParsedContent'\nexport * from './models/ParsedUrl'\nexport * from './models/SearchResult'\n\nexport * from './utils/createSearchIndex'\nexport * from './utils/searchArchive'\nexport * from './utils/getSearchResultItemList'\nexport * from './utils/json2CategoryMapper'\nexport * from './utils/parsePathAndSetContent'\n","import { HowToActions, TOGGLE_FM_VIEW_MODE } from './types'\n\n// Generic\nexport interface Action<T, P> {\n    readonly type: T\n    readonly payload: P\n}\n\nexport function createAction<T extends string, P>(type: T, payload: P): Action<T, P> {\n    return { type, payload }\n}\n\n// Actions\nexport const createToggleAction = (): HowToActions => {\n    return createAction(TOGGLE_FM_VIEW_MODE, undefined)\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { LocationChangeAction, LOCATION_CHANGE } from 'connected-react-router'\nimport { Reducer } from 'redux'\n\nimport { HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW, HOWTO_DEFAULT_VIEW_MODE } from '../../lib'\nimport { HowToActions, TOGGLE_FM_VIEW_MODE } from './types'\n\nexport const howToReducer = (state: any = [], action: HowToActions): Reducer => {\n    switch (action.type) {\n        case TOGGLE_FM_VIEW_MODE:\n            const prevViewMode = state.fileManagerViewMode || HOWTO_DEFAULT_VIEW_MODE\n            let newViewMode\n            if (prevViewMode === HOWTO_VIEW_MODE_GRID_VIEW) {\n                newViewMode = HOWTO_VIEW_MODE_LIST_VIEW\n            } else if (prevViewMode === HOWTO_VIEW_MODE_LIST_VIEW) {\n                newViewMode = HOWTO_VIEW_MODE_GRID_VIEW\n            } else {\n                newViewMode = HOWTO_DEFAULT_VIEW_MODE\n            }\n            return {\n                ...state,\n                fileManagerViewMode: newViewMode\n            }\n        default:\n            return state\n    }\n}\n\nexport const locationReducer = (state: any = [], action: LocationChangeAction): Reducer => {\n    switch (action.type) {\n        case LOCATION_CHANGE:\n            return {\n                ...state,\n                requestedPath: action.payload.location.pathname\n            }\n        default:\n            return state\n    }\n}\n","import { Action } from './actions'\n\nexport const TOGGLE_FM_VIEW_MODE = 'TOGGLE_FM_VIEW_MODE'\n\ntype ToggleAction = Action<typeof TOGGLE_FM_VIEW_MODE, undefined>\n\nexport type HowToActions = ToggleAction\n","import { connectRouter, routerMiddleware } from 'connected-react-router'\nimport { createBrowserHistory, History } from 'history'\nimport { applyMiddleware, createStore, combineReducers } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nimport { howToReducer, locationReducer } from './reducers'\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['fileManagerViewMode']\n}\n\nexport const history = createBrowserHistory()\n\nconst createRootReducer = (history: History<unknown>) =>\n    combineReducers({\n        router: connectRouter(history),\n        howtoReducer: persistReducer(persistConfig, howToReducer),\n        locationReducer\n    })\n\nexport function configureStore(preloadedState = undefined) {\n    // Middlewares\n    const middlewares = [routerMiddleware(history)]\n    const middlewareEnhancer = applyMiddleware(...middlewares)\n\n    // Enhancers\n    const enhancers = [middlewareEnhancer]\n    const composedEnhancers = composeWithDevTools(...enhancers)\n\n    // Reducers\n    const persistedRootReducer = createRootReducer(history)\n\n    // Store & Persistor\n    const store = createStore(persistedRootReducer, preloadedState, composedEnhancers)\n\n    const persistor = persistStore(store)\n\n    return { store, persistor }\n}\n","import React, { useEffect, useState } from 'react'\n\nimport firebase from 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/auth'\nimport { Alert, Spinner } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { HowToContainer, FileManagerViewMode, Category, json2CategoryMapper } from '../lib'\nimport { createToggleAction } from './redux/actions'\nimport { history } from './redux/configureStore'\n\n// Firabase\nconst config = {\n    apiKey: 'AIzaSyDlYpctL19t8-r4A_pyGMrZggnbbdsJ1zI',\n    databaseURL: 'https://yvip-howto.firebaseio.com',\n    projectId: 'yvip-howto'\n}\nexport const firebaseApp = firebase.initializeApp(config)\n\ninterface HowToProps {\n    requestedPath: string\n    fileManagerViewMode: FileManagerViewMode\n    createToggleAction: () => void\n}\n\nconst _HowTo = ({ requestedPath, fileManagerViewMode, createToggleAction }: HowToProps) => {\n    // states\n    const [howToData, setHowToData] = useState<Category | null>(null)\n    const [errorFlag, setErrorFlag] = useState<boolean>(false)\n    const [errorMessage, setErrorMessage] = useState<string | null>(null)\n    const [loadedFlag, setLoadedFlag] = useState<boolean>(false)\n\n    // hooks\n    useEffect(() => {\n        if (!loadedFlag) {\n            fetchHowtoData()\n        }\n    })\n\n    // methods\n    const fetchHowtoData = () => {\n        firebaseApp\n            .auth()\n            .signInAnonymously()\n            .then(() => {\n                firebaseApp\n                    .database()\n                    .ref('howto')\n                    .on(\n                        'value',\n                        (snapshot) => {\n                            if (snapshot.exists()) {\n                                const val = snapshot.val()\n                                const data = JSON.parse(val)\n                                setHowToData(json2CategoryMapper(data))\n                                setLoadedFlag(true)\n                                setErrorFlag(false)\n                            } else {\n                                setLoadedFlag(true)\n                                setErrorFlag(true)\n                                setErrorMessage('Snapshot can not found on firebase.')\n                            }\n                        },\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        (error: any) => {\n                            setLoadedFlag(true)\n                            setErrorFlag(true)\n                            setErrorMessage(`${error}`)\n                        }\n                    )\n            })\n            .catch((error) => {\n                console.log('login failed', error)\n                // ...\n            })\n    }\n\n    if (!loadedFlag) {\n        return (\n            <div className=\"d-flex h-100\">\n                <Spinner animation=\"border\" className=\"mx-auto align-self-center\" />\n            </div>\n        )\n    }\n\n    if (!howToData || errorFlag) {\n        return (\n            <Alert key={1} variant=\"danger\">\n                {errorMessage}\n            </Alert>\n        )\n    }\n\n    // console.log(requestedPath)\n    const path = requestedPath === '/' ? '/howto' : '/howto' + requestedPath\n    return (\n        <HowToContainer\n            key={`${requestedPath}-${new Date()}`}\n            rootCategory={howToData}\n            requestedPath={path}\n            viewMode={fileManagerViewMode}\n            events={{\n                viewModeToggleEventHandler: () => {\n                    createToggleAction()\n                },\n                itemSelectEventHandler: (type, link) => {\n                    history.push(link.replace('/howto', ''))\n                }\n            }}\n        />\n        // align-items-stretch\"\n    )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst mapStateToProps = (state: { howtoReducer: any; locationReducer: any }) => {\n    return {\n        fileManagerViewMode: state.howtoReducer.fileManagerViewMode,\n        requestedPath: state.locationReducer.requestedPath\n    }\n}\n\nconst mapDispatchToProps = { createToggleAction }\nexport const HowTo = connect(mapStateToProps, mapDispatchToProps)(_HowTo)\n","import React, { FC } from 'react'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { Container } from 'react-bootstrap'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport { HowTo } from './HowTo'\nimport { history } from './redux/configureStore'\n\n// Fontaweome\nlibrary.add(fab)\nlibrary.add(fas)\nlibrary.add(far)\n\nconst App: FC = () => (\n    <ConnectedRouter history={history}>\n        <Container fluid className=\"py-4 h-100\">\n            <Switch>\n                <Redirect from=\"/:url*(/+)\" to={history.location.pathname.slice(0, -1)} />\n                <Route exact path=\"/*\" component={HowTo} />\n            </Switch>\n        </Container>\n    </ConnectedRouter>\n)\n\nexport default App\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport WebFont from 'webfontloader'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './showcase/App'\nimport { configureStore } from './showcase/redux/configureStore'\n\nconst { store, persistor } = configureStore()\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n)\n\nWebFont.load({\n    google: {\n        families: ['Lato', 'Ubuntu']\n    }\n})\n","import { HOWTO_ITEM_TYPE_HOWTO, HOWTO_ITEM_TYPE_CATEGORY } from '../constants'\nimport { Category } from '../models/Category'\nimport { HowToItem } from '../models/HowToItem'\n\nexport const createSearchIndex = (rootCategory: Category): HowToItem[] => {\n    return indexContent(rootCategory, [], '/howto')\n}\n\nconst indexContent = (data: Category, arr: HowToItem[], path: string): HowToItem[] => {\n    const howtoList = data.howtoList\n    const subCategoryList = data.subCategoryList\n\n    Object.keys(howtoList).forEach((key) => {\n        const howto = howtoList[key]\n        const name = howto.label\n        const newPath = path + '/' + name\n\n        const howToItem: HowToItem = {\n            path: newPath,\n            type: HOWTO_ITEM_TYPE_HOWTO,\n            name: name.toLowerCase()\n        }\n        arr.push(howToItem)\n    })\n\n    Object.keys(subCategoryList).forEach((key) => {\n        const subCategory = subCategoryList[key]\n        const name = subCategory.name\n        const newPath = path + '/' + name\n\n        const howToItem: HowToItem = {\n            path: newPath,\n            type: HOWTO_ITEM_TYPE_CATEGORY,\n            name: name.toLowerCase()\n        }\n\n        arr.push(howToItem)\n        indexContent(subCategory, arr, newPath)\n    })\n\n    return arr\n}\n","import { HowToItem } from '../models/HowToItem'\nimport { SearchResult } from '../models/SearchResult'\n\nexport const getSearchResultItemList = (searchResult: SearchResult | undefined): HowToItem[] => {\n    if (!searchResult) {\n        return []\n    }\n\n    const result: HowToItem[] = []\n    searchResult.categoryHits?.forEach((hit) => {\n        result.push(hit)\n    })\n\n    searchResult.howtoHits?.forEach((hit) => {\n        result.push(hit)\n    })\n    return result\n}\n","import _ from 'underscore'\n\nimport { Category } from '../models/Category'\nimport { ParsedContent } from '../models/ParsedContent'\nimport { ParsedUrl } from '../models/ParsedUrl'\n\n/**\n *\n * Example1\n * url: https://www.yazilim.vip/howto\n * path = \"/howto\"\n * categoryNames = []\n * folderPath = \"howto\"\n * selectedCategoryName = \"howto\"\n *\n * Example2\n * url: https://www.yazilim.vip/howto/linux\n * path = \"linux\"\n * categoryNames = [\"linux\"]\n * folderPath = \"howto/linux\"\n * selectedCategoryName = \"linux\"\n *\n * Example3\n * url: https://www.yazilim.vip/howto/linux/specific_distro\n * path = \"/howto/linux/specific_distro\"\n * categoryNames = [\"linux\", \"specific_distro\"]\n * folderPath = \"howto/linux/specific_distro\"\n * selectedCategoryName = \"specific_distro\"\n *\n * Example4\n * url: http://www.yazilim.vip/howto/ide/Eclipse/eclipse-shortcuts_configuration.howto\n * path = \"/howto/ide/Eclipse/eclipse-shortcuts_configuration.howto\"\n * categoryNames = [\"ide, \"Eclipse\"]\n * folderPath = \"howto/ide/Eclipse\"\n * selectedCategoryName = \"Eclipse\"\n * selectedHowtoName = \"eclipse-shortcuts_configuration.howto\"\n */\nexport const parsePathAndSetContent = (rootCategory: Category | undefined, path: string): ParsedUrl => {\n    const categoryNames = path.slice(1).split('/')\n    const folderPath = '/' + categoryNames.join('/')\n    const selectedCategoryName = categoryNames[categoryNames.length - 1]\n    const rootCategorySelectedFlag: boolean = path === '/howto'\n    const howtoSelectedFlag = path.endsWith('.howto') || path.endsWith('.md')\n    const selectedHowtoName = howtoSelectedFlag ? categoryNames.pop() : undefined\n\n    const parsedContent = setContent(rootCategory, categoryNames, selectedHowtoName)\n\n    const categoryFoundFlag = !_.isUndefined(parsedContent?.selectedCategory)\n    const howToFoundFlag = !_.isUndefined(parsedContent?.selectedHowto)\n    return {\n        categoryNames,\n        folderPath,\n        selectedCategoryName,\n        rootCategorySelectedFlag,\n        howtoSelectedFlag,\n        selectedHowtoName,\n        parsedContent,\n        categoryFoundFlag,\n        howToFoundFlag\n    }\n}\n\nconst setContent = (\n    rootCategory: Category | undefined,\n    categoryNames: string[],\n    selectedHowtoName?: string | undefined\n): ParsedContent | undefined => {\n    let selectedCategory = rootCategory\n    categoryNames.shift() // shift first category (howto), because rootCategory is not wrapped with \"howto\" key\n    for (const cat of categoryNames) {\n        selectedCategory = selectedCategory?.subCategoryList[cat]\n    }\n\n    const result: ParsedContent = {\n        selectedCategory,\n        selectedHowto: undefined,\n        categoryHits: undefined,\n        howtoHits: undefined\n    }\n\n    if (selectedHowtoName && selectedCategory?.howtoList.hasOwnProperty(selectedHowtoName)) {\n        result.selectedHowto = selectedCategory.howtoList[selectedHowtoName]\n    }\n    return result\n}\n","import { HOWTO_ITEM_TYPE_CATEGORY, HOWTO_ITEM_TYPE_HOWTO } from '../constants'\nimport { HowToItem } from '../models/HowToItem'\nimport { SearchResult } from '../models/SearchResult'\n\nexport const searchArchive = (searchIndex: HowToItem[], query: string): SearchResult => {\n    if (!query) {\n        return {\n            query: ''\n        }\n    }\n\n    const hits = searchIndex.filter((o) => o.name.includes(query.toLowerCase()))\n    if (!hits) {\n        return {\n            query: query\n        }\n    }\n\n    const categoryHits: HowToItem[] = []\n    const howtoHits: HowToItem[] = []\n    hits.forEach((hit: HowToItem) => {\n        if (hit.type === HOWTO_ITEM_TYPE_CATEGORY) {\n            categoryHits.push(hit)\n        } else if (hit.type === HOWTO_ITEM_TYPE_HOWTO) {\n            howtoHits.push(hit)\n        }\n    })\n\n    return {\n        query: query,\n        categoryHits: categoryHits,\n        howtoHits: howtoHits\n    }\n}\n","import { FileManagerViewMode } from './types'\n\n// FileManager\nexport const HOWTO_VIEW_MODE_LIST_VIEW = 'list-view'\nexport const HOWTO_VIEW_MODE_GRID_VIEW = 'grid-view'\nexport const HOWTO_DEFAULT_VIEW_MODE: FileManagerViewMode = HOWTO_VIEW_MODE_GRID_VIEW\n\n// HowToItem\nexport const HOWTO_ITEM_TYPE_HOWTO = 'howto_hit'\nexport const HOWTO_ITEM_TYPE_CATEGORY = 'category_hit'\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { Category } from '../models/Category'\nimport { HowTo } from '../models/HowTo'\n\nexport const json2CategoryMapper = (mockData: any): Category => {\n    const categoryObj = JSON.parse(JSON.stringify(mockData))\n\n    const objSubCategoryList = categoryObj.subCategoryList\n    const subCategoryList: { [s: string]: Category } = {}\n    Object.keys(objSubCategoryList).forEach((sc: any) => {\n        const subCategory = json2CategoryMapper(objSubCategoryList[sc])\n        subCategoryList[subCategory.name] = subCategory\n    })\n\n    const objHowToList = categoryObj.howtoList\n    const howtoList: { [s: string]: HowTo } = {}\n    Object.keys(objHowToList).forEach((ht: any) => {\n        const howTo: HowTo = {\n            categoryList: objHowToList[ht].categoryList,\n            label: objHowToList[ht].label,\n            filePath: objHowToList[ht].filePath,\n            markdownContent: objHowToList[ht].markdownContent\n        }\n        howtoList[howTo.label] = howTo\n    })\n    return {\n        name: categoryObj.name,\n        subCategoryList,\n        howtoList\n    }\n}\n","import { HOWTO_ITEM_TYPE_CATEGORY, HOWTO_ITEM_TYPE_HOWTO } from '../constants'\nimport { Category } from '../models/Category'\nimport { HowToItem } from '../models/HowToItem'\n\nexport const getFileManagerItemList = (selectedCategory: Category | undefined, folderPath: string): HowToItem[] => {\n    if (!selectedCategory) {\n        return []\n    }\n\n    const result: HowToItem[] = []\n\n    const categoryList = selectedCategory.subCategoryList\n    Object.keys(categoryList).forEach((catName) => {\n        result.push({\n            name: categoryList[catName].name,\n            path: `${folderPath}/${categoryList[catName].name}`,\n            type: HOWTO_ITEM_TYPE_CATEGORY\n        })\n    })\n\n    const howToList = selectedCategory.howtoList\n    Object.keys(howToList).forEach((howToName) => {\n        result.push({\n            name: howToList[howToName].label,\n            path: `${folderPath}/${howToList[howToName].label}`,\n            type: HOWTO_ITEM_TYPE_HOWTO\n        })\n    })\n\n    return result\n}\n","import React, { FC } from 'react'\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\n\nimport { TooltipElementProps } from '../types'\n\nexport const TooltipElement: FC<TooltipElementProps> = ({\n    placement,\n    tooltipElement,\n    children\n}: TooltipElementProps) => {\n    return (\n        <OverlayTrigger placement={placement} overlay={<Tooltip id=\"tooltip-disabled\">{tooltipElement}</Tooltip>}>\n            {children}\n        </OverlayTrigger>\n    )\n}\n","import React, { FC } from 'react'\n\nimport { faFileAlt, faFolder, IconDefinition } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { ListGroup, Container, Col, Row } from 'react-bootstrap'\n\nimport { HOWTO_ITEM_TYPE_CATEGORY, HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW } from '../constants'\nimport { HowToItem } from '../models/HowToItem'\nimport { FileManagerProps, HowToItemType } from '../types'\nimport { TooltipElement } from './TooltipElement'\n\nexport const FileManager: FC<FileManagerProps> = ({\n    viewMode,\n    itemList,\n    itemSelectedEventHandler\n}: FileManagerProps) => {\n    const getProps = (type: HowToItemType): { icon: IconDefinition; color: string } => {\n        if (type === HOWTO_ITEM_TYPE_CATEGORY) {\n            return {\n                icon: faFolder,\n                color: '#50a4d4'\n            }\n        } else {\n            return {\n                icon: faFileAlt,\n                color: '#494d52'\n            }\n        }\n    }\n\n    return (\n        <Container fluid>\n            {viewMode === HOWTO_VIEW_MODE_LIST_VIEW && (\n                <ListGroup>\n                    {itemList?.map((item: HowToItem) => {\n                        const props = getProps(item.type)\n                        return (\n                            <div\n                                className=\"file-manager-item\"\n                                key={item.path}\n                                onClick={() => {\n                                    itemSelectedEventHandler(item.type, item.path)\n                                }}\n                            >\n                                <ListGroup.Item>\n                                    <FontAwesomeIcon icon={props.icon} className=\"mr-3\" color={props.color} />\n                                    {item.name}\n                                </ListGroup.Item>\n                            </div>\n                        )\n                    })}\n                </ListGroup>\n            )}\n            {viewMode === HOWTO_VIEW_MODE_GRID_VIEW && (\n                <Row>\n                    {itemList?.map((item: HowToItem) => {\n                        const props = getProps(item.type)\n                        return (\n                            <Col xs={4} sm={3} md={3} lg={2} className=\"py-4 text-center\" key={item.path}>\n                                <TooltipElement\n                                    placement=\"bottom\"\n                                    tooltipElement={item.path.replace('/howto/', '').replace(/\\//g, ' > ')}\n                                >\n                                    <div\n                                        className=\"file-manager-item\"\n                                        onClick={() => {\n                                            itemSelectedEventHandler(item.type, item.path)\n                                        }}\n                                    >\n                                        <FontAwesomeIcon\n                                            icon={props.icon}\n                                            className=\"pb-1\"\n                                            size=\"4x\"\n                                            color={props.color}\n                                        />\n                                        <br />\n                                        {item.name}\n                                    </div>\n                                </TooltipElement>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            )}\n        </Container>\n    )\n}\n","import React, { FC } from 'react'\n\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Breadcrumb } from 'react-bootstrap'\n\nimport { HOWTO_ITEM_TYPE_CATEGORY } from '../constants'\nimport { PathBreadcrumbProps } from '../types'\n\nexport const PathBreadcrumb: FC<PathBreadcrumbProps> = ({ items, itemSelectEventHandler }: PathBreadcrumbProps) => {\n    const getLink = (index: number) => {\n        return '/howto/' + items.slice(0, index).join('/')\n    }\n    return (\n        <Breadcrumb>\n            <Breadcrumb.Item\n                key=\"root\"\n                linkProps={{\n                    className: 'link'\n                }}\n                onClick={() => itemSelectEventHandler(HOWTO_ITEM_TYPE_CATEGORY, '/howto')}\n            >\n                <span>\n                    <FontAwesomeIcon icon={faHome} />\n                </span>\n            </Breadcrumb.Item>\n            {items.map((item, index) => {\n                return (\n                    <Breadcrumb.Item\n                        key={item}\n                        linkProps={{\n                            className: 'link'\n                        }}\n                        active={index + 1 === items.length}\n                        onClick={() => itemSelectEventHandler(HOWTO_ITEM_TYPE_CATEGORY, getLink(index + 1))}\n                    >\n                        {item}\n                    </Breadcrumb.Item>\n                )\n            })}\n        </Breadcrumb>\n    )\n}\n","import React, { FC } from 'react'\n\nimport { faTh, faThList } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\n\nimport { HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW } from '../constants'\nimport { ViewModeChangerProps } from '../types'\nimport { TooltipElement } from './TooltipElement'\n\nexport const ViewModeChanger: FC<ViewModeChangerProps> = ({\n    viewMode,\n    viewModeToggleEventHandler\n}: ViewModeChangerProps) => {\n    return (\n        <ButtonGroup toggle className=\"float-right\">\n            <TooltipElement placement=\"bottom\" tooltipElement=\"Grid View Mode\">\n                <ToggleButton\n                    type=\"radio\"\n                    variant=\"secondary\"\n                    name=\"radio\"\n                    value={viewMode === HOWTO_VIEW_MODE_GRID_VIEW ? 'true' : 'false'}\n                    checked={viewMode === HOWTO_VIEW_MODE_GRID_VIEW}\n                    onChange={() => viewModeToggleEventHandler()}\n                >\n                    <FontAwesomeIcon icon={faTh} />\n                </ToggleButton>\n            </TooltipElement>\n            <TooltipElement placement=\"bottom\" tooltipElement=\"List View Mode\">\n                <ToggleButton\n                    type=\"radio\"\n                    variant=\"secondary\"\n                    name=\"radio\"\n                    value={viewMode === HOWTO_VIEW_MODE_LIST_VIEW ? 'true' : 'false'}\n                    checked={viewMode === HOWTO_VIEW_MODE_LIST_VIEW}\n                    onChange={() => viewModeToggleEventHandler()}\n                >\n                    <FontAwesomeIcon icon={faThList} />\n                </ToggleButton>\n            </TooltipElement>\n        </ButtonGroup>\n    )\n}\n","import React, { FC, useState } from 'react'\n\nimport { Alert, Row, Col, FormControl, Badge } from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown'\n\nimport { HOWTO_DEFAULT_VIEW_MODE, HOWTO_ITEM_TYPE_CATEGORY } from '../constants'\nimport { SearchResult } from '../models/SearchResult'\nimport { HowToContainerProps, FileManagerViewMode } from '../types'\nimport { createSearchIndex } from '../utils/createSearchIndex'\nimport { getFileManagerItemList } from '../utils/getFileManagerItemList'\nimport { getSearchResultItemList } from '../utils/getSearchResultItemList'\nimport { parsePathAndSetContent } from '../utils/parsePathAndSetContent'\nimport { searchArchive } from '../utils/searchArchive'\nimport { toggleFmViewMode } from '../utils/toggleFmViewMode'\nimport { FileManager } from './FileManager'\nimport { PathBreadcrumb } from './PathBreadcrumb'\nimport { ViewModeChanger } from './ViewModeChanger'\nimport './HowToContainer.css'\n\nexport const HowToContainer: FC<HowToContainerProps> = ({\n    rootCategory,\n    requestedPath,\n    viewMode,\n    events\n}: HowToContainerProps) => {\n    // states\n    const [searchResult, setSearchResult] = useState<SearchResult | undefined>(undefined)\n    const [fmViewMode, setFmViewMode] = useState<FileManagerViewMode>(viewMode)\n\n    // constants\n    const searchIndex = createSearchIndex(rootCategory)\n    const parsedUrl = parsePathAndSetContent(rootCategory, requestedPath)\n    const selectedCategory = parsedUrl?.parsedContent?.selectedCategory\n    const pathBreadcrumbElements = parsedUrl?.categoryNames\n    if (parsedUrl?.selectedHowtoName) {\n        pathBreadcrumbElements.push(parsedUrl.selectedHowtoName)\n    }\n\n    // events\n    const handlerViewModeToggleEvent = () => {\n        if (events.viewModeToggleEventHandler) {\n            events.viewModeToggleEventHandler()\n        } else {\n            const newViewMode = toggleFmViewMode(fmViewMode)\n            setFmViewMode(newViewMode)\n        }\n    }\n\n    const handlerSearchEvent = (query: string) => {\n        if (events.searchEventHandler) {\n            events.searchEventHandler(query)\n        } else {\n            if (query) {\n                const searchResult = searchArchive(searchIndex, query)\n                setSearchResult(searchResult)\n            } else {\n                setSearchResult(undefined)\n            }\n        }\n    }\n\n    // render ui\n    if (!parsedUrl.categoryFoundFlag) {\n        return (\n            <div>\n                Category <b>{parsedUrl.folderPath.replace('/howto/', '') + ' '}</b>\n                not found in path.\n                <br />\n                <div onClick={() => events.itemSelectEventHandler(HOWTO_ITEM_TYPE_CATEGORY, '/howto')}>\n                    Go to root directory\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col md=\"7\">\n                    <PathBreadcrumb\n                        items={pathBreadcrumbElements}\n                        itemSelectEventHandler={events.itemSelectEventHandler}\n                    />\n                    {searchResult && (\n                        <div className=\"search-result-div\">\n                            <span className=\"mr-3\">Search Result for :</span>\n                            <Badge pill variant=\"dark\">\n                                {searchResult.query}\n                            </Badge>\n                        </div>\n                    )}\n                </Col>\n                <Col md=\"2\" sm=\"3\" className=\"mb-2 mb-sm-0\">\n                    <div className=\"d-flex bd-highlight mb-3\">\n                        <div className=\"ml-auto mr-4\"></div>\n\n                        {!parsedUrl.howtoSelectedFlag && (\n                            <ViewModeChanger\n                                viewMode={fmViewMode}\n                                viewModeToggleEventHandler={handlerViewModeToggleEvent}\n                            />\n                        )}\n                    </div>\n                </Col>\n                <Col md=\"3\" sm=\"9\">\n                    <FormControl\n                        type=\"search\"\n                        placeholder=\"Search...\"\n                        aria-label=\"Search\"\n                        value={searchResult ? searchResult.query : ''}\n                        onChange={(event) => {\n                            const searchQuery = event.target.value\n                            handlerSearchEvent(searchQuery)\n                        }}\n                    />\n                </Col>\n            </Row>\n            <hr />\n            {!searchResult && parsedUrl.howtoSelectedFlag && !parsedUrl.howToFoundFlag && (\n                <Alert key={1} variant=\"danger\">\n                    <b>Whopps {parsedUrl.selectedHowtoName}</b> not found in <b>{selectedCategory?.name}</b> folder.\n                    <br />\n                    {/* <Link to={parsedUrl.folderPath}>Go to {selectedCategory?.name} category</Link> */}\n                </Alert>\n            )}\n            {!searchResult && parsedUrl.howToFoundFlag ? (\n                <ReactMarkdown source={parsedUrl?.parsedContent?.selectedHowto?.markdownContent} />\n            ) : (\n                <FileManager\n                    itemSelectedEventHandler={events.itemSelectEventHandler}\n                    viewMode={fmViewMode}\n                    itemList={\n                        searchResult\n                            ? getSearchResultItemList(searchResult)\n                            : getFileManagerItemList(selectedCategory, parsedUrl.folderPath)\n                    }\n                />\n            )}\n        </div>\n    )\n}\n\nHowToContainer.defaultProps = {\n    viewMode: HOWTO_DEFAULT_VIEW_MODE\n}\n","import { HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW, HOWTO_DEFAULT_VIEW_MODE } from '../constants'\nimport { FileManagerViewMode } from '../types'\n\nexport const toggleFmViewMode = (prevViewMode: FileManagerViewMode): FileManagerViewMode => {\n    if (prevViewMode === HOWTO_VIEW_MODE_GRID_VIEW) {\n        return HOWTO_VIEW_MODE_LIST_VIEW\n    } else if (prevViewMode === HOWTO_VIEW_MODE_LIST_VIEW) {\n        return HOWTO_VIEW_MODE_GRID_VIEW\n    } else {\n        return HOWTO_DEFAULT_VIEW_MODE\n    }\n}\n"],"sourceRoot":""}