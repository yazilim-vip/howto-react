{"version":3,"sources":["lib/utils/getFileManagerItemList.tsx","lib/utils/getSearchResultItemList.tsx","lib/components/TooltipElement.tsx","lib/components/FileManager.tsx","lib/components/PathBreadcrumb.tsx","lib/components/ViewModeChanger.tsx","lib/components/HowToContainer.tsx","lib/utils/toggleFmViewMode.tsx","lib/utils/createSearchIndex.tsx","lib/utils/parsePathAndSetContent.tsx","lib/utils/searchArchive.tsx","../README.md","showcase/App.tsx","index.tsx","lib/constants.tsx","lib/index.tsx"],"names":["getFileManagerItemList","selectedCategory","folderPath","result","categoryList","subCategoryList","Object","keys","forEach","catName","push","name","path","type","HOWTO_ITEM_TYPE_CATEGORY","howToList","howtoList","howToName","label","HOWTO_ITEM_TYPE_HOWTO","getSearchResultItemList","searchResult","categoryHits","hit","howtoHits","TooltipElement","placement","tooltipElement","children","OverlayTrigger","overlay","Tooltip","id","FileManager","viewMode","itemList","itemSelectedEventHandler","getProps","icon","faFolder","color","faFileAlt","Container","fluid","HOWTO_VIEW_MODE_LIST_VIEW","ListGroup","map","item","props","className","key","onClick","Item","HOWTO_VIEW_MODE_GRID_VIEW","Row","Col","xs","sm","md","lg","replace","size","PathBreadcrumb","items","itemSelectEventHandler","Breadcrumb","linkProps","faHome","index","active","length","slice","join","getLink","ViewModeChanger","viewModeToggleEventHandler","ButtonGroup","toggle","ToggleButton","variant","value","checked","onChange","faTh","faThList","HowToContainer","rootCategory","requestedPath","events","useState","undefined","setSearchResult","fmViewMode","setFmViewMode","searchIndex","createSearchIndex","parsedUrl","parsePathAndSetContent","parsedContent","pathBreadcrumbElements","categoryNames","selectedHowtoName","categoryFoundFlag","Badge","pill","query","howtoSelectedFlag","newViewMode","prevViewMode","HOWTO_DEFAULT_VIEW_MODE","FormControl","placeholder","aria-label","event","searchEventHandler","searchArchive","handlerSearchEvent","target","howToFoundFlag","Alert","source","selectedHowto","markdownContent","defaultProps","indexContent","data","arr","howToItem","toLowerCase","subCategory","newPath","split","selectedCategoryName","rootCategorySelectedFlag","endsWith","pop","setContent","_","isUndefined","shift","cat","hasOwnProperty","hits","filter","o","includes","module","exports","library","add","fab","fas","far","CodeBlock","language","style","materialOceanic","Showcase","setRequestedPath","Date","MOCK_CATEGORY","link","Home","readme","setReadme","useEffect","readmePath","require","fetch","then","response","text","catch","error","console","log","Jumbotron","renderers","code","App","Navbar","bg","Brand","as","Link","to","Nav","href","faGithub","exact","faCopyright","ReactDOM","render","document","getElementById","WebFont","load","google","families"],"mappings":"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","file":"static/js/main.713c01ce.chunk.js","sourcesContent":["import { Category } from '@yazilim-vip/howto-script'\n\nimport { HOWTO_ITEM_TYPE_CATEGORY, HOWTO_ITEM_TYPE_HOWTO } from '../constants'\nimport { HowToItem } from '../models/HowToItem'\n\nexport const getFileManagerItemList = (selectedCategory: Category | undefined, folderPath: string): HowToItem[] => {\n    if (!selectedCategory) {\n        return []\n    }\n\n    const result: HowToItem[] = []\n\n    const categoryList = selectedCategory.subCategoryList\n    Object.keys(categoryList).forEach((catName) => {\n        result.push({\n            name: categoryList[catName].name,\n            path: `${folderPath}/${categoryList[catName].name}`,\n            type: HOWTO_ITEM_TYPE_CATEGORY\n        })\n    })\n\n    const howToList = selectedCategory.howtoList\n    Object.keys(howToList).forEach((howToName) => {\n        result.push({\n            name: howToList[howToName].label,\n            path: `${folderPath}/${howToList[howToName].label}`,\n            type: HOWTO_ITEM_TYPE_HOWTO\n        })\n    })\n\n    return result\n}\n","import { HowToItem } from '../models/HowToItem'\nimport { SearchResult } from '../models/SearchResult'\n\nexport const getSearchResultItemList = (searchResult: SearchResult | undefined): HowToItem[] => {\n    if (!searchResult) {\n        return []\n    }\n\n    const result: HowToItem[] = []\n    searchResult.categoryHits?.forEach((hit) => {\n        result.push(hit)\n    })\n\n    searchResult.howtoHits?.forEach((hit) => {\n        result.push(hit)\n    })\n    return result\n}\n","import React, { FC } from 'react'\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\n\nimport { TooltipElementProps } from '../types'\n\nexport const TooltipElement: FC<TooltipElementProps> = ({\n    placement,\n    tooltipElement,\n    children\n}: TooltipElementProps) => {\n    return (\n        <OverlayTrigger placement={placement} overlay={<Tooltip id=\"tooltip-disabled\">{tooltipElement}</Tooltip>}>\n            {children}\n        </OverlayTrigger>\n    )\n}\n","import React, { FC } from 'react'\n\nimport { faFileAlt, faFolder, IconDefinition } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { ListGroup, Container, Col, Row } from 'react-bootstrap'\n\nimport { HOWTO_ITEM_TYPE_CATEGORY, HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW } from '../constants'\nimport { HowToItem } from '../models/HowToItem'\nimport { FileManagerProps, HowToItemType } from '../types'\nimport { TooltipElement } from './TooltipElement'\n\nexport const FileManager: FC<FileManagerProps> = ({\n    viewMode,\n    itemList,\n    itemSelectedEventHandler\n}: FileManagerProps) => {\n    const getProps = (type: HowToItemType): { icon: IconDefinition; color: string } => {\n        if (type === HOWTO_ITEM_TYPE_CATEGORY) {\n            return {\n                icon: faFolder,\n                color: '#50a4d4'\n            }\n        } else {\n            return {\n                icon: faFileAlt,\n                color: '#494d52'\n            }\n        }\n    }\n\n    return (\n        <Container fluid>\n            {viewMode === HOWTO_VIEW_MODE_LIST_VIEW && (\n                <ListGroup>\n                    {itemList?.map((item: HowToItem) => {\n                        const props = getProps(item.type)\n                        return (\n                            <div\n                                className=\"file-manager-item\"\n                                key={item.path}\n                                onClick={() => {\n                                    itemSelectedEventHandler(item.type, item.path)\n                                }}\n                            >\n                                <ListGroup.Item>\n                                    <FontAwesomeIcon icon={props.icon} className=\"mr-3\" color={props.color} />\n                                    {item.name}\n                                </ListGroup.Item>\n                            </div>\n                        )\n                    })}\n                </ListGroup>\n            )}\n            {viewMode === HOWTO_VIEW_MODE_GRID_VIEW && (\n                <Row>\n                    {itemList?.map((item: HowToItem) => {\n                        const props = getProps(item.type)\n                        return (\n                            <Col xs={4} sm={3} md={3} lg={2} className=\"py-4 text-center\" key={item.path}>\n                                <TooltipElement\n                                    placement=\"bottom\"\n                                    tooltipElement={item.path.replace('/howto/', '').replace(/\\//g, ' > ')}\n                                >\n                                    <div\n                                        className=\"file-manager-item\"\n                                        onClick={() => {\n                                            itemSelectedEventHandler(item.type, item.path)\n                                        }}\n                                    >\n                                        <FontAwesomeIcon\n                                            icon={props.icon}\n                                            className=\"pb-1\"\n                                            size=\"4x\"\n                                            color={props.color}\n                                        />\n                                        <br />\n                                        {item.name}\n                                    </div>\n                                </TooltipElement>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            )}\n        </Container>\n    )\n}\n","import React, { FC } from 'react'\n\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Breadcrumb } from 'react-bootstrap'\n\nimport { HOWTO_ITEM_TYPE_CATEGORY } from '../constants'\nimport { PathBreadcrumbProps } from '../types'\n\nexport const PathBreadcrumb: FC<PathBreadcrumbProps> = ({ items, itemSelectEventHandler }: PathBreadcrumbProps) => {\n    const getLink = (index: number) => {\n        return '/howto/' + items.slice(0, index).join('/')\n    }\n    return (\n        <Breadcrumb>\n            <Breadcrumb.Item\n                key=\"root\"\n                linkProps={{\n                    className: 'link'\n                }}\n                onClick={() => itemSelectEventHandler(HOWTO_ITEM_TYPE_CATEGORY, '/howto')}\n            >\n                <span>\n                    <FontAwesomeIcon icon={faHome} />\n                </span>\n            </Breadcrumb.Item>\n            {items.map((item, index) => {\n                return (\n                    <Breadcrumb.Item\n                        key={item}\n                        linkProps={{\n                            className: 'link'\n                        }}\n                        active={index + 1 === items.length}\n                        onClick={() => itemSelectEventHandler(HOWTO_ITEM_TYPE_CATEGORY, getLink(index + 1))}\n                    >\n                        {item}\n                    </Breadcrumb.Item>\n                )\n            })}\n        </Breadcrumb>\n    )\n}\n","import React, { FC } from 'react'\n\nimport { faTh, faThList } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\n\nimport { HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW } from '../constants'\nimport { ViewModeChangerProps } from '../types'\nimport { TooltipElement } from './TooltipElement'\n\nexport const ViewModeChanger: FC<ViewModeChangerProps> = ({\n    viewMode,\n    viewModeToggleEventHandler\n}: ViewModeChangerProps) => {\n    return (\n        <ButtonGroup toggle className=\"float-right\">\n            <TooltipElement placement=\"bottom\" tooltipElement=\"Grid View Mode\">\n                <ToggleButton\n                    type=\"radio\"\n                    variant=\"secondary\"\n                    name=\"radio\"\n                    value={viewMode === HOWTO_VIEW_MODE_GRID_VIEW ? 'true' : 'false'}\n                    checked={viewMode === HOWTO_VIEW_MODE_GRID_VIEW}\n                    onChange={() => viewModeToggleEventHandler()}\n                >\n                    <FontAwesomeIcon icon={faTh} />\n                </ToggleButton>\n            </TooltipElement>\n            <TooltipElement placement=\"bottom\" tooltipElement=\"List View Mode\">\n                <ToggleButton\n                    type=\"radio\"\n                    variant=\"secondary\"\n                    name=\"radio\"\n                    value={viewMode === HOWTO_VIEW_MODE_LIST_VIEW ? 'true' : 'false'}\n                    checked={viewMode === HOWTO_VIEW_MODE_LIST_VIEW}\n                    onChange={() => viewModeToggleEventHandler()}\n                >\n                    <FontAwesomeIcon icon={faThList} />\n                </ToggleButton>\n            </TooltipElement>\n        </ButtonGroup>\n    )\n}\n","import React, { FC, useState } from 'react'\n\nimport { Alert, Row, Col, FormControl, Badge } from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown'\n\nimport { HOWTO_DEFAULT_VIEW_MODE, HOWTO_ITEM_TYPE_CATEGORY } from '../constants'\nimport { SearchResult } from '../models/SearchResult'\nimport { HowToContainerProps, FileManagerViewMode } from '../types'\nimport { createSearchIndex } from '../utils/createSearchIndex'\nimport { getFileManagerItemList } from '../utils/getFileManagerItemList'\nimport { getSearchResultItemList } from '../utils/getSearchResultItemList'\nimport { parsePathAndSetContent } from '../utils/parsePathAndSetContent'\nimport { searchArchive } from '../utils/searchArchive'\nimport { toggleFmViewMode } from '../utils/toggleFmViewMode'\nimport { FileManager } from './FileManager'\nimport { PathBreadcrumb } from './PathBreadcrumb'\nimport { ViewModeChanger } from './ViewModeChanger'\nimport './HowToContainer.css'\n\nexport const HowToContainer: FC<HowToContainerProps> = ({\n    rootCategory,\n    requestedPath,\n    viewMode,\n    events\n}: HowToContainerProps) => {\n    // states\n    const [searchResult, setSearchResult] = useState<SearchResult | undefined>(undefined)\n    const [fmViewMode, setFmViewMode] = useState<FileManagerViewMode>(viewMode)\n\n    // constants\n    const searchIndex = createSearchIndex(rootCategory)\n    const parsedUrl = parsePathAndSetContent(rootCategory, requestedPath)\n    const selectedCategory = parsedUrl?.parsedContent?.selectedCategory\n    const pathBreadcrumbElements = parsedUrl?.categoryNames\n    if (parsedUrl?.selectedHowtoName) {\n        pathBreadcrumbElements.push(parsedUrl.selectedHowtoName)\n    }\n\n    // events\n    const handlerViewModeToggleEvent = () => {\n        if (events.viewModeToggleEventHandler) {\n            events.viewModeToggleEventHandler()\n        } else {\n            const newViewMode = toggleFmViewMode(fmViewMode)\n            setFmViewMode(newViewMode)\n        }\n    }\n\n    const handlerSearchEvent = (query: string) => {\n        if (events.searchEventHandler) {\n            events.searchEventHandler(query)\n        } else {\n            if (query) {\n                const searchResult = searchArchive(searchIndex, query)\n                setSearchResult(searchResult)\n            } else {\n                setSearchResult(undefined)\n            }\n        }\n    }\n\n    // render ui\n    if (!parsedUrl.categoryFoundFlag) {\n        return (\n            <div>\n                Category <b>{parsedUrl.folderPath.replace('/howto/', '') + ' '}</b>\n                not found in path.\n                <br />\n                <div onClick={() => events.itemSelectEventHandler(HOWTO_ITEM_TYPE_CATEGORY, '/howto')}>\n                    Go to root directory\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col md=\"7\">\n                    <PathBreadcrumb\n                        items={pathBreadcrumbElements}\n                        itemSelectEventHandler={events.itemSelectEventHandler}\n                    />\n                    {searchResult && (\n                        <div className=\"search-result-div\">\n                            <span className=\"mr-3\">Search Result for :</span>\n                            <Badge pill variant=\"dark\">\n                                {searchResult.query}\n                            </Badge>\n                        </div>\n                    )}\n                </Col>\n                <Col md=\"2\" sm=\"3\" className=\"mb-2 mb-sm-0\">\n                    <div className=\"d-flex bd-highlight mb-3\">\n                        <div className=\"ml-auto mr-4\"></div>\n\n                        {!parsedUrl.howtoSelectedFlag && (\n                            <ViewModeChanger\n                                viewMode={fmViewMode}\n                                viewModeToggleEventHandler={handlerViewModeToggleEvent}\n                            />\n                        )}\n                    </div>\n                </Col>\n                <Col md=\"3\" sm=\"9\">\n                    <FormControl\n                        type=\"search\"\n                        placeholder=\"Search...\"\n                        aria-label=\"Search\"\n                        value={searchResult ? searchResult.query : ''}\n                        onChange={(event) => {\n                            const searchQuery = event.target.value\n                            handlerSearchEvent(searchQuery)\n                        }}\n                    />\n                </Col>\n            </Row>\n            <hr />\n            {!searchResult && parsedUrl.howtoSelectedFlag && !parsedUrl.howToFoundFlag && (\n                <Alert key={1} variant=\"danger\">\n                    <b>Whopps {parsedUrl.selectedHowtoName}</b> not found in <b>{selectedCategory?.name}</b> folder.\n                    <br />\n                    {/* <Link to={parsedUrl.folderPath}>Go to {selectedCategory?.name} category</Link> */}\n                </Alert>\n            )}\n            {!searchResult && parsedUrl.howToFoundFlag ? (\n                <ReactMarkdown source={parsedUrl?.parsedContent?.selectedHowto?.markdownContent} />\n            ) : (\n                <FileManager\n                    itemSelectedEventHandler={events.itemSelectEventHandler}\n                    viewMode={fmViewMode}\n                    itemList={\n                        searchResult\n                            ? getSearchResultItemList(searchResult)\n                            : getFileManagerItemList(selectedCategory, parsedUrl.folderPath)\n                    }\n                />\n            )}\n        </div>\n    )\n}\n\nHowToContainer.defaultProps = {\n    viewMode: HOWTO_DEFAULT_VIEW_MODE\n}\n","import { HOWTO_VIEW_MODE_GRID_VIEW, HOWTO_VIEW_MODE_LIST_VIEW, HOWTO_DEFAULT_VIEW_MODE } from '../constants'\nimport { FileManagerViewMode } from '../types'\n\nexport const toggleFmViewMode = (prevViewMode: FileManagerViewMode): FileManagerViewMode => {\n    if (prevViewMode === HOWTO_VIEW_MODE_GRID_VIEW) {\n        return HOWTO_VIEW_MODE_LIST_VIEW\n    } else if (prevViewMode === HOWTO_VIEW_MODE_LIST_VIEW) {\n        return HOWTO_VIEW_MODE_GRID_VIEW\n    } else {\n        return HOWTO_DEFAULT_VIEW_MODE\n    }\n}\n","import { Category } from '@yazilim-vip/howto-script'\n\nimport { HOWTO_ITEM_TYPE_HOWTO, HOWTO_ITEM_TYPE_CATEGORY } from '../constants'\nimport { HowToItem } from '../models/HowToItem'\n\nexport const createSearchIndex = (rootCategory: Category): HowToItem[] => {\n    return indexContent(rootCategory, [], '/howto')\n}\n\nconst indexContent = (data: Category, arr: HowToItem[], path: string): HowToItem[] => {\n    const howtoList = data.howtoList\n    const subCategoryList = data.subCategoryList\n\n    Object.keys(howtoList).forEach((key) => {\n        const howto = howtoList[key]\n        const name = howto.label\n        const newPath = path + '/' + name\n\n        const howToItem: HowToItem = {\n            path: newPath,\n            type: HOWTO_ITEM_TYPE_HOWTO,\n            name: name.toLowerCase()\n        }\n        arr.push(howToItem)\n    })\n\n    Object.keys(subCategoryList).forEach((key) => {\n        const subCategory = subCategoryList[key]\n        const name = subCategory.name\n        const newPath = path + '/' + name\n\n        const howToItem: HowToItem = {\n            path: newPath,\n            type: HOWTO_ITEM_TYPE_CATEGORY,\n            name: name.toLowerCase()\n        }\n\n        arr.push(howToItem)\n        indexContent(subCategory, arr, newPath)\n    })\n\n    return arr\n}\n","import { Category } from '@yazilim-vip/howto-script'\nimport _ from 'underscore'\n\nimport { ParsedContent } from '../models/ParsedContent'\nimport { ParsedUrl } from '../models/ParsedUrl'\n\n/**\n *\n * Example1\n * url: https://www.yazilim.vip/howto\n * path = \"/howto\"\n * categoryNames = []\n * folderPath = \"howto\"\n * selectedCategoryName = \"howto\"\n *\n * Example2\n * url: https://www.yazilim.vip/howto/linux\n * path = \"linux\"\n * categoryNames = [\"linux\"]\n * folderPath = \"howto/linux\"\n * selectedCategoryName = \"linux\"\n *\n * Example3\n * url: https://www.yazilim.vip/howto/linux/specific_distro\n * path = \"/howto/linux/specific_distro\"\n * categoryNames = [\"linux\", \"specific_distro\"]\n * folderPath = \"howto/linux/specific_distro\"\n * selectedCategoryName = \"specific_distro\"\n *\n * Example4\n * url: http://www.yazilim.vip/howto/ide/Eclipse/eclipse-shortcuts_configuration.howto\n * path = \"/howto/ide/Eclipse/eclipse-shortcuts_configuration.howto\"\n * categoryNames = [\"ide, \"Eclipse\"]\n * folderPath = \"howto/ide/Eclipse\"\n * selectedCategoryName = \"Eclipse\"\n * selectedHowtoName = \"eclipse-shortcuts_configuration.howto\"\n */\nexport const parsePathAndSetContent = (rootCategory: Category | undefined, path: string): ParsedUrl => {\n    const categoryNames = path.slice(1).split('/')\n    const folderPath = '/' + categoryNames.join('/')\n    const selectedCategoryName = categoryNames[categoryNames.length - 1]\n    const rootCategorySelectedFlag: boolean = path === '/howto'\n    const howtoSelectedFlag = path.endsWith('.howto') || path.endsWith('.md')\n    const selectedHowtoName = howtoSelectedFlag ? categoryNames.pop() : undefined\n\n    const parsedContent = setContent(rootCategory, categoryNames, selectedHowtoName)\n\n    const categoryFoundFlag = !_.isUndefined(parsedContent?.selectedCategory)\n    const howToFoundFlag = !_.isUndefined(parsedContent?.selectedHowto)\n    return {\n        categoryNames,\n        folderPath,\n        selectedCategoryName,\n        rootCategorySelectedFlag,\n        howtoSelectedFlag,\n        selectedHowtoName,\n        parsedContent,\n        categoryFoundFlag,\n        howToFoundFlag\n    }\n}\n\nconst setContent = (\n    rootCategory: Category | undefined,\n    categoryNames: string[],\n    selectedHowtoName?: string | undefined\n): ParsedContent | undefined => {\n    let selectedCategory = rootCategory\n    categoryNames.shift() // shift first category (howto), because rootCategory is not wrapped with \"howto\" key\n    for (const cat of categoryNames) {\n        selectedCategory = selectedCategory?.subCategoryList[cat]\n    }\n\n    const result: ParsedContent = {\n        selectedCategory,\n        selectedHowto: undefined,\n        categoryHits: undefined,\n        howtoHits: undefined\n    }\n\n    if (selectedHowtoName && selectedCategory?.howtoList.hasOwnProperty(selectedHowtoName)) {\n        result.selectedHowto = selectedCategory.howtoList[selectedHowtoName]\n    }\n    return result\n}\n","import { HOWTO_ITEM_TYPE_CATEGORY, HOWTO_ITEM_TYPE_HOWTO } from '../constants'\nimport { HowToItem } from '../models/HowToItem'\nimport { SearchResult } from '../models/SearchResult'\n\nexport const searchArchive = (searchIndex: HowToItem[], query: string): SearchResult => {\n    if (!query) {\n        return {\n            query: ''\n        }\n    }\n\n    const hits = searchIndex.filter((o) => o.name.includes(query.toLowerCase()))\n    if (!hits) {\n        return {\n            query: query\n        }\n    }\n\n    const categoryHits: HowToItem[] = []\n    const howtoHits: HowToItem[] = []\n    hits.forEach((hit: HowToItem) => {\n        if (hit.type === HOWTO_ITEM_TYPE_CATEGORY) {\n            categoryHits.push(hit)\n        } else if (hit.type === HOWTO_ITEM_TYPE_HOWTO) {\n            howtoHits.push(hit)\n        }\n    })\n\n    return {\n        query: query,\n        categoryHits: categoryHits,\n        howtoHits: howtoHits\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/media/README.011f15d7.md\";","import React, { FC, useEffect, useState } from 'react'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab, faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { faCopyright, far } from '@fortawesome/free-regular-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { MOCK_CATEGORY } from '@yazilim-vip/howto-script/build/mockCategory'\nimport { Container, Navbar, Nav, Jumbotron } from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { materialOceanic } from 'react-syntax-highlighter/dist/cjs/styles/prism'\n\nimport { HowToContainer, HOWTO_VIEW_MODE_GRID_VIEW } from '../lib'\n\n// Fontaweome\nlibrary.add(fab)\nlibrary.add(fas)\nlibrary.add(far)\n\ntype CodeBlockProps = { value: string; language: string }\n// eslint-disable-next-line react/prop-types\nconst CodeBlock: FC<CodeBlockProps> = ({ value, language }) => (\n    <SyntaxHighlighter style={materialOceanic} language={language}>\n        {value}\n    </SyntaxHighlighter>\n)\n\nconst Showcase: FC = () => {\n    const [requestedPath, setRequestedPath] = useState<string>('/howto')\n    return (\n        <HowToContainer\n            key={`${requestedPath}-${new Date()}`}\n            rootCategory={MOCK_CATEGORY}\n            requestedPath={requestedPath}\n            viewMode={HOWTO_VIEW_MODE_GRID_VIEW}\n            events={{\n                itemSelectEventHandler: (type, link) => {\n                    setRequestedPath(link)\n                }\n            }}\n        />\n    )\n}\n\nconst Home: FC = () => {\n    const [readme, setReadme] = useState<string | undefined>(undefined)\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const readmePath = require('./README.md')\n        fetch(readmePath)\n            .then((response) => {\n                return response.text()\n            })\n            .then((text) => {\n                setReadme(text)\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    })\n\n    return (\n        <Container>\n            <Jumbotron>\n                <ReactMarkdown source={readme} renderers={{ code: CodeBlock }} />\n            </Jumbotron>\n        </Container>\n    )\n}\n\nconst App: FC = () => {\n    // states\n\n    return (\n        <Router>\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand as={Link} to=\"/\">\n                    React HowTo\n                </Navbar.Brand>\n                <Nav className=\"mr-auto d-flex align-item-center\">\n                    <Nav.Link as={Link} to=\"/\">\n                        Home\n                    </Nav.Link>\n                    <Nav.Link as={Link} to=\"/showcase\">\n                        Showcase\n                    </Nav.Link>\n                </Nav>\n                <Nav className=\"d-flex align-items-center\">\n                    <Nav.Link href=\"https://github.com/yazilim-vip/react-howto\" target=\"_blank\">\n                        <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n                    </Nav.Link>\n                </Nav>\n            </Navbar>\n\n            <Container fluid className=\"py-4\">\n                <Switch>\n                    <Route path=\"/showcase\">\n                        <Showcase />\n                    </Route>\n                    <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </Container>\n\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"mt-auto\">\n                <Nav className=\"d-flex align-items-center mx-auto justify-content-center\">\n                    <Nav.Link href=\"https://www.yazilim.vip\">\n                        <FontAwesomeIcon icon={faCopyright} /> Yazilim VIP\n                    </Nav.Link>\n                </Nav>\n            </Navbar>\n        </Router>\n    )\n}\nexport default App\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport WebFont from 'webfontloader'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './showcase/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nWebFont.load({\n    google: {\n        families: ['Lato', 'Ubuntu']\n    }\n})\n","import { FileManagerViewMode } from './types'\n\n// FileManager\nexport const HOWTO_VIEW_MODE_LIST_VIEW = 'list-view'\nexport const HOWTO_VIEW_MODE_GRID_VIEW = 'grid-view'\nexport const HOWTO_DEFAULT_VIEW_MODE: FileManagerViewMode = HOWTO_VIEW_MODE_GRID_VIEW\n\n// HowToItem\nexport const HOWTO_ITEM_TYPE_HOWTO = 'howto_hit'\nexport const HOWTO_ITEM_TYPE_CATEGORY = 'category_hit'\n","export * from './components/HowToContainer'\n\nexport * from './types'\nexport * from './constants'\n\nexport * from './models/HowToItem'\nexport * from './models/ParsedContent'\nexport * from './models/ParsedUrl'\nexport * from './models/SearchResult'\n\nexport * from './utils/createSearchIndex'\nexport * from './utils/parsePathAndSetContent'\nexport * from './utils/searchArchive'\n"],"sourceRoot":""}